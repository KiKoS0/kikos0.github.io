const canvas=document.getElementById("canvas"),ctx=canvas.getContext("2d"),timing=document.getElementById("timing"),timingVal=document.getElementById("timing-val"),button=document.getElementById("render");function loadWasm(){if("function"!=typeof SharedArrayBuffer)return void alert("this browser does not have SharedArrayBuffer support enabled\n\nThis demo requires a newer version of Firefox (e.g., 79.0)");const a=new Uint8Array([0,97,115,109,1,0,0,0,5,3,1,0,1,11,3,1,1,0]);return WebAssembly.validate(a)?void wasm_bindgen("./wasm_client_bg.wasm").then(run).catch(console.error):void alert("this browser does not support passive wasm memory, demo does not work\n\nThis demo requires a newer version of Firefox (e.g., 79.0)")}loadWasm();const{WorkerPool,RayTracerRuntime}=wasm_bindgen;let rendering=null,start=null,interval=null,pool=null;class State{constructor(a){this.start=performance.now(),this.wasm=a,this.running=!0,this.counter=1,canvas.width=a.width,canvas.height=a.height,button.disabled=!0,this.interval=setInterval(()=>this.updateTimer(!0),100),a.promise().then(a=>{this.updateTimer(!1),this.updateImage(a),this.stop()}).catch(console.error)}updateTimer(){const a=performance.now()-this.start;timingVal.innerText=`${a}ms`,this.counter+=1}updateImage(a){ctx.putImageData(a,0,0)}stop(){this.running&&(console.timeEnd("render"),this.running=!1,this.wasm=null,clearInterval(this.interval),button.disabled=!1)}}button.disabled=!0;const container=document.getElementById("jsoneditor");let editor=null;function initJsonEditor(){editor=new JSONEditor(container,{})}function run(){pool=new WorkerPool(navigator.hardwareConcurrency),console.log(pool),initJsonEditor(),fetch("./world.json").then(a=>a.json()).then(a=>{editor.set(a),console.log("WORLD LOADED")}),button.onclick=function(){let a;try{a=editor.get(a)}catch(a){return void alert(`invalid json: ${a}`)}render(RayTracerRuntime.new(a,600,3/2))},button.innerText="Render",button.disabled=!1}function render(a){rendering&&(rendering.stop(),rendering=null),rendering=new State(a.render(navigator.hardwareConcurrency,pool))}